const findBlockByAlias = (alias) => {
    return $(".reviews__item").filter((ndx, item) => {
        return $(item).attr("data-linked-with") === alias;
    });
};

$(".interactive-avatar__link").click((e) => {
    e.preventDefault();

    const $this = $(e.currentTarget);
    const target = $this.attr("data-open");
    const itemToShow = findBlockByAlias(target);
    const curItem = $this.parent();

    itemToShow.addClass("active").siblings().removeClass("active");
    curItem.addClass("active").siblings().removeClass("active");
})

const team = document.querySelector('.team');
const teamLink = document.querySelector('.team__link');

team.addEventListener('click', e => {
    e.preventDefault();
    const link = e.target;
    const listItem = e.currentTarget;

    if(link.classList.contains('team__link')) {
        const active = listItem.querySelector('.team__item.team__item--is-active');

        if(active) {
            let activeInfo = active.querySelector('.team__info');
            activeInfo.style.height = '0px';
            active.classList.remove('team__item--is-active');
        }

        if(!active || active.querySelector('.team__link') !== link) {
            let current = link.closest('.team__item');
            current.classList.add('team__item--is-active');
            let currentText = current.querySelector('.team__info');
            currentText.style.height = currentText.scrollHeight + 'px';
        }
    }
});

$(document).ready(function(){
    $('.slider-section__slider-control').slick(
        {
            nextArrow: $(".slider-section__right-arrow"),
            prevArrow: $(".slider-section__left-arrow"),
            centerMode: true,
            respondTo: 'min',
            centerPadding: '-5rem'
        }
    );
});


const validateFields = (form, fieldsArray) => {

    fieldsArray.forEach((field) => {
        field.removeClass('input-error');

        if (typeof field.val() === 'string') {
            if (field.val().trim() === '') {
                field.addClass('input-error')
            }
        }
        else if (typeof field.val() === 'undefined')
        {
            field.addClass('input-error')
        }
    });

    const errorFields = form.find('.input-error');

    return errorFields.length === 0;
}


$('.form').submit(e => {
    e.preventDefault();

    const form = $(e.currentTarget);
    const name = form.find("[name='name']");
    const phone = form.find("[name='phone']");
    const comment = form.find("[name='comment']");
    const to = form.find("[name='to']");

    const popup = $('#popup');
    const content = popup.find('.popup__text');
    popup.removeClass('error-popup');

    const isValid = validateFields(form, [name, phone, comment, to]);
    const statusAjaxForm = {};

    if (isValid) {
        const request = $.ajax({
            url:'https://webdev-api.loftschool.com/sendmail',
            method: 'post',
            data: {
                name: name.val(),
                phone: phone.val(),
                comment: comment.val(),
                to: to.val().trim(),
            },
            error: data => {}
        });

        request.done(data => {
            content.text(data.message);
            statusAjaxForm.done = true;
            popup.find('.popup__text').removeClass('error-popup');
        });

        request.fail(data => {
            statusAjaxForm.done = false;
            const message = data.responseJSON.message;
            content.text(message);
            popup.find('.popup__text').addClass('error-popup');
        });

        request.always(() => {
            $.fancybox.open({
                src: '#popup',
                type: 'inline',

                afterClose: function () {
                    if (statusAjaxForm.done)
                    {
                        form[0].reset();
                    }
                }
            });
        })
    }
});

$('.form__input').change(e => {
    $this = $(e.currentTarget);
    $this.removeClass('input-error');
});


$('.js-btn-submit').click(e => {
    e.preventDefault();

    $.fancybox.close();
});

const burgerBtn = $('#burger');
const hamburger = $('.hamburger-panel');
const closeBtn = $('.close-btn');
const hambLink = $('.hamburger-panel__link');

function switcher(elem, className) {
    elem.toggleClass(className);
}

let flag = true;

burgerBtn.click( e => {
    e.preventDefault();

    if(flag) {
        flag = false;
        hamburger.removeClass('hidden');
        setTimeout(function() {
            switcher(hamburger, 'isActive');
            flag = true;
        }, 500);
    }
});

closeBtn.click( e => {
    e.preventDefault();

    if(flag) {
        flag = false;
        hamburger.removeClass('isActive');
        setTimeout(function() {
            switcher(hamburger, 'hidden');
            flag = true;
        }, 500);
    }

});

hambLink.click( e => {
    hamburger.removeClass('isActive');
    setTimeout(function() {
        switcher(hamburger, 'hidden');
        flag = false;
        }, 500);
});


$(".inc-panel").each(function () {
    $(this).on('mouseover', function() {
        $(this).find(".inc-menu").css({display: 'flex'});
    });
    $(this).on('mouseout', function() {
        $(this).find(".inc-menu").css({display: 'none'});
    });
})


let player;
const playerContainer = $(".player");
let f= 1;

let eventsInit = () => {
    $(".player__start").click(e => {
        e.preventDefault();

        if (playerContainer.hasClass("paused")) {
            player.pauseVideo();
        } else {
            player.playVideo();
        }
    });

    $(".player__playback").click(e => {
        const bar = $(e.currentTarget);
        const clickedPosition = e.originalEvent.layerX;
        const newButtonPositionPercent = (clickedPosition / bar.width()) * 100;
        const newPlaybackPositionSec =
            (player.getDuration() / 100) * newButtonPositionPercent;

        $(".player__playback-button").css({
            left: `${newButtonPositionPercent}%`
        });

        player.seekTo(newPlaybackPositionSec);
    });

    $(".player__splash").click(e => {
        player.playVideo();
    })
};

const formatTime = timeSec => {
    const roundTime = Math.round(timeSec);

    const minutes = addZero(Math.floor(roundTime / 60));
    const seconds = addZero(roundTime - minutes * 60);

    function addZero(num) {
        return num < 10 ? `0${num}` : num;
    }

    return `${minutes} : ${seconds}`;
};

const onPlayerReady = () => {
    let interval;
    const durationSec = player.getDuration();

    $(".player__duration-estimate").text(formatTime(durationSec));

    if (typeof interval !== "undefined") {
        clearInterval(interval);
    }

    interval = setInterval(() => {
        const completedSec = player.getCurrentTime();
        const completedPercent = (completedSec / durationSec) * 100;

        $(".player__playback-button").css({
            left: `${completedPercent}%`
        });

        $(".player__duration-completed").text(formatTime(completedSec));
    }, 1000);
};

const onPlayerStateChange = event => {
    /*
      -1 (воспроизведение видео не начато)
      0 (воспроизведение видео завершено)
      1 (воспроизведение)
      2 (пауза)
      3 (буферизация)
      5 (видео подают реплики).
    */
    switch (event.data) {
        case 1:
            playerContainer.addClass("active");
            playerContainer.addClass("paused");
            break;

        case 2:
            playerContainer.removeClass("active");
            playerContainer.removeClass("paused");
            break;
    }
};

function onYouTubeIframeAPIReady() {
    player = new YT.Player("yt-player", {
        height: "405",
        width: "660",
        videoId: "LXb3EKWsInQ",
        events: {
            onReady: onPlayerReady,
            onStateChange: onPlayerStateChange
        },
        playerVars: {
            controls: 0,
            disablekb: 0,
            showinfo: 0,
            rel: 0,
            autoplay: 0,
            modestbranding: 0
        }
    });
}

eventsInit();

let myMap;
const init = () => {
    myMap = new ymaps.Map("map", {
        center: [59.93916998692174, 30.309015096732622],
        zoom: 11,
        controls: [],
    });

    let coords = [
            [59.94554327989287, 30.38935262114668],
            [59.91142323563909, 30.50024587065841],
            [59.88693161784606, 30.319658102103713],
            [59.97033574821672, 30.315194906302924],
        ],
        myCollection = new ymaps.GeoObjectCollection({}, {
            draggable: false,
            iconLayout: 'default#image',
            iconImageHref: './img/icons/marker.svg',
            iconImageSize: [46, 57],
            iconImageOffset: [-35, -52]
        });

    for (let i = 0; i < coords.length; i++) {
        myCollection.add(new ymaps.Placemark(coords[i]));
    }

    myMap.geoObjects.add(myCollection);

    myMap.behaviors.disable('scrollZoom');
};

ymaps.ready(init);


function accord(selector) {
    const accord = document.querySelector(selector);
    const items = accord.querySelector('[data-list]').children;
    const closeButton = document.querySelector('.accord__close-btn');

    accord.addEventListener('click', function(e) {
        e.preventDefault ();
        const target = e.target.closest('[data]');

        if (e.target.classList.contains('accord__close-btn'))
        {
            e.target.parentNode.parentNode.parentNode.classList.remove('item-active')
        }

        if(!target) return;

        const item = target.parentNode;

        if (item.classList.contains('item-active')) {
            item.classList.remove('item-active');
        }else {
            for (let i = 0; i < items.length; i++) {
                items[i].classList.remove('item-active');
            }

            item.classList.add('item-active');
        }
    });

}

accord ('#accord-menu')

const sections = $("section");
const display = $(".maincontent");
const sideMenu = $(".fixed-menu");
const menuItems = sideMenu.find(".fixed-menu__item");

const mobiled = new MobileDetect(window.navigator.userAgent);
const isMobile = mobiled.mobile();

let inScroll = false;

sections.first().addClass("active");

const countSectionPosition = sectionEq => {

    return sectionEq * -100;

    //let hei = activeSection.next().height();
};

const changeMenuThemeForSection = (sectionEq) => {
    const currentSection = sections.eq(sectionEq);
    const menuTheme = currentSection.attr("data-sidemenu-theme");
    const activeClass = "fixed-menu--shadowed";

    if (menuTheme === "black") {
        sideMenu.addClass(activeClass);
    } else {
        sideMenu.removeClass(activeClass);
    }
};

const resetActiveClassForItem = (items, itemEq, activeClass) => {
    items.eq(itemEq).addClass(activeClass).siblings().removeClass(activeClass);
}

const performTransition = sectionEq => {

    if (inScroll) return;

    const transitionOver = 1000;
    const mouseInertiaOver = 300;

    inScroll = true;

    const position = countSectionPosition(sectionEq);

    changeMenuThemeForSection(sectionEq);


    display.css({
        transform: `translateY(${position}%)`
    });

    resetActiveClassForItem(sections, sectionEq, "active");
    sections.eq(sectionEq).addClass("active").siblings().removeClass("active");


    setTimeout(() => {
        inScroll = false;

        resetActiveClassForItem(menuItems, sectionEq, "fixed-menu__item--active");

    }, transitionOver + mouseInertiaOver)

};

const scrollViewport = direction => {
    const activeSection = sections.filter(".active");
    const nextSection = activeSection.next();
    const prevSection = activeSection.prev();

    if (direction === "next" && nextSection.length) {
        performTransition(nextSection.index());
    }

    if (direction === "prev" && prevSection.length) {
        performTransition(prevSection.index());
    }
};

$(window).on("wheel", e => {
    const deltaY = e.originalEvent.deltaY;

    if (deltaY > 0) {
        scrollViewport("next");
    }

    if (deltaY < 0) {
        scrollViewport("prev");
    }
});

$(window).on("keydown", e => {

    const tagname = e.target.tagName.toLowerCase();
    const userTypingInInputs = tagname === "input" || tagname === "textarea";
    if (userTypingInInputs) return;

    switch (e.keyCode) {
        case 38:
            scrollViewport("prev");
            break;
        case 40:
            scrollViewport("next");
            break;
    }
});

$(".wrapper").on("touchmove", e => e.preventDefault());

$("[data-scroll-to]").click(e => {
    e.preventDefault();

    const $this = $(e.currentTarget);
    const target = $this.attr("data-scroll-to");
    const reqSection = $(`[data-section-id=${target}]`);

    performTransition(reqSection.index());

});

if (isMobile)
{
    $("body").swipe({
        swipe: function (event, direction) {
            if (direction === "up")
            {
                scrollViewport("next");
            }
            if (direction === "down")
            {
                scrollViewport("prev");
            }
        }
    });
}



//# sourceMappingURL=data:application/json;charset=utf8;base64,
