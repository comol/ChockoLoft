const findBlockByAlias = (alias) => {
    return $(".reviews__item").filter((ndx, item) => {
        return $(item).attr("data-linked-with") === alias;
    });
};

$(".interactive-avatar__link").click((e) => {
    e.preventDefault();

    const $this = $(e.currentTarget);
    const target = $this.attr("data-open");
    const itemToShow = findBlockByAlias(target);
    const curItem = $this.parent();

    itemToShow.addClass("active").siblings().removeClass("active");
    curItem.addClass("active").siblings().removeClass("active");
})

const team = document.querySelector('.team');
const teamLink = document.querySelector('.team__link');

team.addEventListener('click', e => {
    e.preventDefault();
    const link = e.target;
    const listItem = e.currentTarget;

    if(link.classList.contains('team__link')) {
        const active = listItem.querySelector('.team__item.team__item--is-active');

        if(active) {
            let activeInfo = active.querySelector('.team__info');
            activeInfo.style.height = '0px';
            active.classList.remove('team__item--is-active');
        }

        if(!active || active.querySelector('.team__link') !== link) {
            let current = link.closest('.team__item');
            current.classList.add('team__item--is-active');
            let currentText = current.querySelector('.team__info');
            currentText.style.height = currentText.scrollHeight + 'px';
        }
    }
});

$(document).ready(function(){
    $('.slider-section__slider-control').slick(
        {
            nextArrow: $(".slider-section__right-arrow"),
            prevArrow: $(".slider-section__left-arrow"),
            centerMode: true,
            respondTo: 'min',
            centerPadding: '-5rem'
        }
    );
});


const validateFields = (form, fieldsArray) => {

    fieldsArray.forEach((field) => {
        field.removeClass('input-error');

        if (typeof field.val() === 'string') {
            if (field.val().trim() === '') {
                field.addClass('input-error')
            }
        }
        else if (typeof field.val() === 'undefined')
        {
            field.addClass('input-error')
        }
    });

    const errorFields = form.find('.input-error');

    return errorFields.length === 0;
}


$('.form').submit(e => {
    e.preventDefault();

    const form = $(e.currentTarget);
    const name = form.find("[name='name']");
    const phone = form.find("[name='phone']");
    const comment = form.find("[name='comment']");
    const to = form.find("[name='to']");

    const popup = $('#popup');
    const content = popup.find('.popup__text');
    popup.removeClass('error-popup');

    const isValid = validateFields(form, [name, phone, comment, to]);
    const statusAjaxForm = {};

    if (isValid) {
        const request = $.ajax({
            url:'https://webdev-api.loftschool.com/sendmail',
            method: 'post',
            data: {
                name: name.val(),
                phone: phone.val(),
                comment: comment.val(),
                to: to.val().trim(),
            },
            error: data => {}
        });

        request.done(data => {
            content.text(data.message);
            statusAjaxForm.done = true;
            popup.find('.popup__text').removeClass('error-popup');
        });

        request.fail(data => {
            statusAjaxForm.done = false;
            const message = data.responseJSON.message;
            content.text(message);
            popup.find('.popup__text').addClass('error-popup');
        });

        request.always(() => {
            $.fancybox.open({
                src: '#popup',
                type: 'inline',

                afterClose: function () {
                    if (statusAjaxForm.done)
                    {
                        form[0].reset();
                    }
                }
            });
        })
    }
});

$('.form__input').change(e => {
    $this = $(e.currentTarget);
    $this.removeClass('input-error');
});


$('.js-btn-submit').click(e => {
    e.preventDefault();

    $.fancybox.close();
});

const burgerBtn = $('#burger');
const hamburger = $('.hamburger-panel');
const closeBtn = $('.close-btn');

function switcher(elem, className) {
    elem.toggleClass(className);
}

let flag = true;

burgerBtn.click( e => {
    e.preventDefault();

    if(flag) {
        flag = false;
        hamburger.removeClass('hidden');
        setTimeout(function() {
            switcher(hamburger, 'isActive');
            flag = true;
        }, 500);
    }
});

closeBtn.click( e => {
    e.preventDefault();

    if(flag) {
        flag = false;
        hamburger.removeClass('isActive');
        setTimeout(function() {
            switcher(hamburger, 'hidden');
            flag = true;
        }, 500);
    }

});


$(".inc-panel").each(function () {
    $(this).on('mouseover', function() {
        $(this).find(".inc-menu").css({display: 'flex'});
    });
    $(this).on('mouseout', function() {
        $(this).find(".inc-menu").css({display: 'none'});
    });
})


let player;
const playerContainer = $(".player");
let f= 1;

let eventsInit = () => {
    $(".player__start").click(e => {
        e.preventDefault();

        if (playerContainer.hasClass("paused")) {
            player.pauseVideo();
        } else {
            player.playVideo();
        }
    });

    $(".player__playback").click(e => {
        const bar = $(e.currentTarget);
        const clickedPosition = e.originalEvent.layerX;
        const newButtonPositionPercent = (clickedPosition / bar.width()) * 100;
        const newPlaybackPositionSec =
            (player.getDuration() / 100) * newButtonPositionPercent;

        $(".player__playback-button").css({
            left: `${newButtonPositionPercent}%`
        });

        player.seekTo(newPlaybackPositionSec);
    });

    $(".player__splash").click(e => {
        player.playVideo();
    })
};

const formatTime = timeSec => {
    const roundTime = Math.round(timeSec);

    const minutes = addZero(Math.floor(roundTime / 60));
    const seconds = addZero(roundTime - minutes * 60);

    function addZero(num) {
        return num < 10 ? `0${num}` : num;
    }

    return `${minutes} : ${seconds}`;
};

const onPlayerReady = () => {
    let interval;
    const durationSec = player.getDuration();

    $(".player__duration-estimate").text(formatTime(durationSec));

    if (typeof interval !== "undefined") {
        clearInterval(interval);
    }

    interval = setInterval(() => {
        const completedSec = player.getCurrentTime();
        const completedPercent = (completedSec / durationSec) * 100;

        $(".player__playback-button").css({
            left: `${completedPercent}%`
        });

        $(".player__duration-completed").text(formatTime(completedSec));
    }, 1000);
};

const onPlayerStateChange = event => {
    /*
      -1 (воспроизведение видео не начато)
      0 (воспроизведение видео завершено)
      1 (воспроизведение)
      2 (пауза)
      3 (буферизация)
      5 (видео подают реплики).
    */
    switch (event.data) {
        case 1:
            playerContainer.addClass("active");
            playerContainer.addClass("paused");
            break;

        case 2:
            playerContainer.removeClass("active");
            playerContainer.removeClass("paused");
            break;
    }
};

function onYouTubeIframeAPIReady() {
    player = new YT.Player("yt-player", {
        height: "405",
        width: "660",
        videoId: "LXb3EKWsInQ",
        events: {
            onReady: onPlayerReady,
            onStateChange: onPlayerStateChange
        },
        playerVars: {
            controls: 0,
            disablekb: 0,
            showinfo: 0,
            rel: 0,
            autoplay: 0,
            modestbranding: 0
        }
    });
}

eventsInit();

let myMap;
const init = () => {
    myMap = new ymaps.Map("map", {
        center: [59.93916998692174, 30.309015096732622],
        zoom: 11,
        controls: [],
    });

    let coords = [
            [59.94554327989287, 30.38935262114668],
            [59.91142323563909, 30.50024587065841],
            [59.88693161784606, 30.319658102103713],
            [59.97033574821672, 30.315194906302924],
        ],
        myCollection = new ymaps.GeoObjectCollection({}, {
            draggable: false,
            iconLayout: 'default#image',
            iconImageHref: './img/icons/marker.svg',
            iconImageSize: [46, 57],
            iconImageOffset: [-35, -52]
        });

    for (let i = 0; i < coords.length; i++) {
        myCollection.add(new ymaps.Placemark(coords[i]));
    }

    myMap.geoObjects.add(myCollection);

    myMap.behaviors.disable('scrollZoom');
};

ymaps.ready(init);


function Accord(selector) {
    const accord = document.querySelector(selector);
    const items = accord.querySelector('[data-list]').children;
    const closeButton = document.querySelector('.accord__close-btn');

    accord.addEventListener('click', function(e) {
        e.preventDefault ();
        const target = e.target.closest('[data]');

        if (e.target.classList.contains('accord__close-btn'))
        {
            e.target.parentNode.parentNode.parentNode.classList.remove('item-active')
        }

        if(!target) return;

        const item = target.parentNode;

        if (item.classList.contains('item-active')) {
            item.classList.remove('item-active');
        }else {
            for (let i = 0; i < items.length; i++) {
                items[i].classList.remove('item-active');
            }

            item.classList.add('item-active');
        }
    });

}

Accord ('#accord-menu')

const sections = $("section");
const display = $(".maincontent");
const sideMenu = $(".fixed-menu");
const menuItems = sideMenu.find(".fixed-menu__item");

const mobiled = new MobileDetect(window.navigator.userAgent);
const isMobile = mobiled.mobile();

let inScroll = false;

sections.first().addClass("active");

const countSectionPosition = sectionEq => {
    return sectionEq * -103.5;
};

const changeMenuThemeForSection = (sectionEq) => {
    const currentSection = sections.eq(sectionEq);
    const menuTheme = currentSection.attr("data-sidemenu-theme");
    const activeClass = "fixed-menu--shadowed";

    if (menuTheme === "black") {
        sideMenu.addClass(activeClass);
    } else {
        sideMenu.removeClass(activeClass);
    }
};

const resetActiveClassForItem = (items, itemEq, activeClass) => {
    items.eq(itemEq).addClass(activeClass).siblings().removeClass(activeClass);
}

const performTransition = sectionEq => {

    if (inScroll) return;

    const transitionOver = 1000;
    const mouseInertiaOver = 300;

    inScroll = true;

    const position = countSectionPosition(sectionEq);

    changeMenuThemeForSection(sectionEq);

    display.css({
        transform: `translateY(${position}%)`
    });

    resetActiveClassForItem(sections, sectionEq, "active");
    sections.eq(sectionEq).addClass("active").siblings().removeClass("active");


    setTimeout(() => {
        inScroll = false;

        resetActiveClassForItem(menuItems, sectionEq, "fixed-menu__item--active");

    }, transitionOver + mouseInertiaOver)
};

const scrollViewport = direction => {
    const activeSection = sections.filter(".active");
    const nextSection = activeSection.next();
    const prevSection = activeSection.prev();

    if (direction === "next" && nextSection.length) {
        performTransition(nextSection.index());
    }

    if (direction === "prev" && prevSection.length) {
        performTransition(prevSection.index());
    }
};

$(window).on("wheel", e => {
    const deltaY = e.originalEvent.deltaY;

    if (deltaY > 0) {
        scrollViewport("next");
    }

    if (deltaY < 0) {
        scrollViewport("prev");
    }
});

$(window).on("keydown", e => {

    const tagname = e.target.tagName.toLowerCase();
    const userTypingInInputs = tagname === "input" || tagname === "textarea";
    if (userTypingInInputs) return;

    switch (e.keyCode) {
        case 38:
            scrollViewport("prev");
            break;
        case 40:
            scrollViewport("next");
            break;
    }
});

$(".wrapper").on("touchmove", e => e.preventDefault());

$("[data-scroll-to]").click(e => {
    e.preventDefault();

    const $this = $(e.currentTarget);
    const target = $this.attr("data-scroll-to");
    const reqSection = $(`[data-section-id=${target}]`);

    performTransition(reqSection.index());

});

if (isMobile)
{
    $("body").swipe({
        swipe: function (event, direction) {
            if (direction === "up")
            {
                scrollViewport("next");
            }
            if (direction === "down")
            {
                scrollViewport("prev");
            }
        }
    });
}



//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhYnMuanMiLCJzbGlkZXRvZ2dsZS5qcyIsInNsaWRlci5qcyIsIm9yZGVyLmpzIiwiYnVyZ2VyLmpzIiwibW9kdWxlLmpzIiwicGxlZXIuanMiLCJtYXAuanMiLCJhY2NvcmQuanMiLCJvcHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDNUZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDcENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDaEhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBmaW5kQmxvY2tCeUFsaWFzID0gKGFsaWFzKSA9PiB7XHJcbiAgICByZXR1cm4gJChcIi5yZXZpZXdzX19pdGVtXCIpLmZpbHRlcigobmR4LCBpdGVtKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuICQoaXRlbSkuYXR0cihcImRhdGEtbGlua2VkLXdpdGhcIikgPT09IGFsaWFzO1xyXG4gICAgfSk7XHJcbn07XHJcblxyXG4kKFwiLmludGVyYWN0aXZlLWF2YXRhcl9fbGlua1wiKS5jbGljaygoZSkgPT4ge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgIGNvbnN0ICR0aGlzID0gJChlLmN1cnJlbnRUYXJnZXQpO1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gJHRoaXMuYXR0cihcImRhdGEtb3BlblwiKTtcclxuICAgIGNvbnN0IGl0ZW1Ub1Nob3cgPSBmaW5kQmxvY2tCeUFsaWFzKHRhcmdldCk7XHJcbiAgICBjb25zdCBjdXJJdGVtID0gJHRoaXMucGFyZW50KCk7XHJcblxyXG4gICAgaXRlbVRvU2hvdy5hZGRDbGFzcyhcImFjdGl2ZVwiKS5zaWJsaW5ncygpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgY3VySXRlbS5hZGRDbGFzcyhcImFjdGl2ZVwiKS5zaWJsaW5ncygpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG59KVxyXG4iLCJjb25zdCB0ZWFtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRlYW0nKTtcclxuY29uc3QgdGVhbUxpbmsgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGVhbV9fbGluaycpO1xyXG5cclxudGVhbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgY29uc3QgbGluayA9IGUudGFyZ2V0O1xyXG4gICAgY29uc3QgbGlzdEl0ZW0gPSBlLmN1cnJlbnRUYXJnZXQ7XHJcblxyXG4gICAgaWYobGluay5jbGFzc0xpc3QuY29udGFpbnMoJ3RlYW1fX2xpbmsnKSkge1xyXG4gICAgICAgIGNvbnN0IGFjdGl2ZSA9IGxpc3RJdGVtLnF1ZXJ5U2VsZWN0b3IoJy50ZWFtX19pdGVtLnRlYW1fX2l0ZW0tLWlzLWFjdGl2ZScpO1xyXG5cclxuICAgICAgICBpZihhY3RpdmUpIHtcclxuICAgICAgICAgICAgbGV0IGFjdGl2ZUluZm8gPSBhY3RpdmUucXVlcnlTZWxlY3RvcignLnRlYW1fX2luZm8nKTtcclxuICAgICAgICAgICAgYWN0aXZlSW5mby5zdHlsZS5oZWlnaHQgPSAnMHB4JztcclxuICAgICAgICAgICAgYWN0aXZlLmNsYXNzTGlzdC5yZW1vdmUoJ3RlYW1fX2l0ZW0tLWlzLWFjdGl2ZScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYoIWFjdGl2ZSB8fCBhY3RpdmUucXVlcnlTZWxlY3RvcignLnRlYW1fX2xpbmsnKSAhPT0gbGluaykge1xyXG4gICAgICAgICAgICBsZXQgY3VycmVudCA9IGxpbmsuY2xvc2VzdCgnLnRlYW1fX2l0ZW0nKTtcclxuICAgICAgICAgICAgY3VycmVudC5jbGFzc0xpc3QuYWRkKCd0ZWFtX19pdGVtLS1pcy1hY3RpdmUnKTtcclxuICAgICAgICAgICAgbGV0IGN1cnJlbnRUZXh0ID0gY3VycmVudC5xdWVyeVNlbGVjdG9yKCcudGVhbV9faW5mbycpO1xyXG4gICAgICAgICAgICBjdXJyZW50VGV4dC5zdHlsZS5oZWlnaHQgPSBjdXJyZW50VGV4dC5zY3JvbGxIZWlnaHQgKyAncHgnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSk7XHJcbiIsIiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCl7XHJcbiAgICAkKCcuc2xpZGVyLXNlY3Rpb25fX3NsaWRlci1jb250cm9sJykuc2xpY2soXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBuZXh0QXJyb3c6ICQoXCIuc2xpZGVyLXNlY3Rpb25fX3JpZ2h0LWFycm93XCIpLFxyXG4gICAgICAgICAgICBwcmV2QXJyb3c6ICQoXCIuc2xpZGVyLXNlY3Rpb25fX2xlZnQtYXJyb3dcIiksXHJcbiAgICAgICAgICAgIGNlbnRlck1vZGU6IHRydWUsXHJcbiAgICAgICAgICAgIHJlc3BvbmRUbzogJ21pbicsXHJcbiAgICAgICAgICAgIGNlbnRlclBhZGRpbmc6ICctNXJlbSdcclxuICAgICAgICB9XHJcbiAgICApO1xyXG59KTtcclxuIiwiXHJcbmNvbnN0IHZhbGlkYXRlRmllbGRzID0gKGZvcm0sIGZpZWxkc0FycmF5KSA9PiB7XHJcblxyXG4gICAgZmllbGRzQXJyYXkuZm9yRWFjaCgoZmllbGQpID0+IHtcclxuICAgICAgICBmaWVsZC5yZW1vdmVDbGFzcygnaW5wdXQtZXJyb3InKTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBmaWVsZC52YWwoKSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgaWYgKGZpZWxkLnZhbCgpLnRyaW0oKSA9PT0gJycpIHtcclxuICAgICAgICAgICAgICAgIGZpZWxkLmFkZENsYXNzKCdpbnB1dC1lcnJvcicpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGZpZWxkLnZhbCgpID09PSAndW5kZWZpbmVkJylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGZpZWxkLmFkZENsYXNzKCdpbnB1dC1lcnJvcicpXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgZXJyb3JGaWVsZHMgPSBmb3JtLmZpbmQoJy5pbnB1dC1lcnJvcicpO1xyXG5cclxuICAgIHJldHVybiBlcnJvckZpZWxkcy5sZW5ndGggPT09IDA7XHJcbn1cclxuXHJcblxyXG4kKCcuZm9ybScpLnN1Ym1pdChlID0+IHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICBjb25zdCBmb3JtID0gJChlLmN1cnJlbnRUYXJnZXQpO1xyXG4gICAgY29uc3QgbmFtZSA9IGZvcm0uZmluZChcIltuYW1lPSduYW1lJ11cIik7XHJcbiAgICBjb25zdCBwaG9uZSA9IGZvcm0uZmluZChcIltuYW1lPSdwaG9uZSddXCIpO1xyXG4gICAgY29uc3QgY29tbWVudCA9IGZvcm0uZmluZChcIltuYW1lPSdjb21tZW50J11cIik7XHJcbiAgICBjb25zdCB0byA9IGZvcm0uZmluZChcIltuYW1lPSd0byddXCIpO1xyXG5cclxuICAgIGNvbnN0IHBvcHVwID0gJCgnI3BvcHVwJyk7XHJcbiAgICBjb25zdCBjb250ZW50ID0gcG9wdXAuZmluZCgnLnBvcHVwX190ZXh0Jyk7XHJcbiAgICBwb3B1cC5yZW1vdmVDbGFzcygnZXJyb3ItcG9wdXAnKTtcclxuXHJcbiAgICBjb25zdCBpc1ZhbGlkID0gdmFsaWRhdGVGaWVsZHMoZm9ybSwgW25hbWUsIHBob25lLCBjb21tZW50LCB0b10pO1xyXG4gICAgY29uc3Qgc3RhdHVzQWpheEZvcm0gPSB7fTtcclxuXHJcbiAgICBpZiAoaXNWYWxpZCkge1xyXG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSAkLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6J2h0dHBzOi8vd2ViZGV2LWFwaS5sb2Z0c2Nob29sLmNvbS9zZW5kbWFpbCcsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnLFxyXG4gICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLnZhbCgpLFxyXG4gICAgICAgICAgICAgICAgcGhvbmU6IHBob25lLnZhbCgpLFxyXG4gICAgICAgICAgICAgICAgY29tbWVudDogY29tbWVudC52YWwoKSxcclxuICAgICAgICAgICAgICAgIHRvOiB0by52YWwoKS50cmltKCksXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVycm9yOiBkYXRhID0+IHt9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJlcXVlc3QuZG9uZShkYXRhID0+IHtcclxuICAgICAgICAgICAgY29udGVudC50ZXh0KGRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgIHN0YXR1c0FqYXhGb3JtLmRvbmUgPSB0cnVlO1xyXG4gICAgICAgICAgICBwb3B1cC5maW5kKCcucG9wdXBfX3RleHQnKS5yZW1vdmVDbGFzcygnZXJyb3ItcG9wdXAnKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmVxdWVzdC5mYWlsKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICBzdGF0dXNBamF4Rm9ybS5kb25lID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBkYXRhLnJlc3BvbnNlSlNPTi5tZXNzYWdlO1xyXG4gICAgICAgICAgICBjb250ZW50LnRleHQobWVzc2FnZSk7XHJcbiAgICAgICAgICAgIHBvcHVwLmZpbmQoJy5wb3B1cF9fdGV4dCcpLmFkZENsYXNzKCdlcnJvci1wb3B1cCcpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXF1ZXN0LmFsd2F5cygoKSA9PiB7XHJcbiAgICAgICAgICAgICQuZmFuY3lib3gub3Blbih7XHJcbiAgICAgICAgICAgICAgICBzcmM6ICcjcG9wdXAnLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2lubGluZScsXHJcblxyXG4gICAgICAgICAgICAgICAgYWZ0ZXJDbG9zZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXNBamF4Rm9ybS5kb25lKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybVswXS5yZXNldCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufSk7XHJcblxyXG4kKCcuZm9ybV9faW5wdXQnKS5jaGFuZ2UoZSA9PiB7XHJcbiAgICAkdGhpcyA9ICQoZS5jdXJyZW50VGFyZ2V0KTtcclxuICAgICR0aGlzLnJlbW92ZUNsYXNzKCdpbnB1dC1lcnJvcicpO1xyXG59KTtcclxuXHJcblxyXG4kKCcuanMtYnRuLXN1Ym1pdCcpLmNsaWNrKGUgPT4ge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICQuZmFuY3lib3guY2xvc2UoKTtcclxufSk7XHJcbiIsImNvbnN0IGJ1cmdlckJ0biA9ICQoJyNidXJnZXInKTtcclxuY29uc3QgaGFtYnVyZ2VyID0gJCgnLmhhbWJ1cmdlci1wYW5lbCcpO1xyXG5jb25zdCBjbG9zZUJ0biA9ICQoJy5jbG9zZS1idG4nKTtcclxuXHJcbmZ1bmN0aW9uIHN3aXRjaGVyKGVsZW0sIGNsYXNzTmFtZSkge1xyXG4gICAgZWxlbS50b2dnbGVDbGFzcyhjbGFzc05hbWUpO1xyXG59XHJcblxyXG5sZXQgZmxhZyA9IHRydWU7XHJcblxyXG5idXJnZXJCdG4uY2xpY2soIGUgPT4ge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgIGlmKGZsYWcpIHtcclxuICAgICAgICBmbGFnID0gZmFsc2U7XHJcbiAgICAgICAgaGFtYnVyZ2VyLnJlbW92ZUNsYXNzKCdoaWRkZW4nKTtcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBzd2l0Y2hlcihoYW1idXJnZXIsICdpc0FjdGl2ZScpO1xyXG4gICAgICAgICAgICBmbGFnID0gdHJ1ZTtcclxuICAgICAgICB9LCA1MDApO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbmNsb3NlQnRuLmNsaWNrKCBlID0+IHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICBpZihmbGFnKSB7XHJcbiAgICAgICAgZmxhZyA9IGZhbHNlO1xyXG4gICAgICAgIGhhbWJ1cmdlci5yZW1vdmVDbGFzcygnaXNBY3RpdmUnKTtcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBzd2l0Y2hlcihoYW1idXJnZXIsICdoaWRkZW4nKTtcclxuICAgICAgICAgICAgZmxhZyA9IHRydWU7XHJcbiAgICAgICAgfSwgNTAwKTtcclxuICAgIH1cclxuXHJcbn0pO1xyXG4iLCJcclxuJChcIi5pbmMtcGFuZWxcIikuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAkKHRoaXMpLm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAkKHRoaXMpLmZpbmQoXCIuaW5jLW1lbnVcIikuY3NzKHtkaXNwbGF5OiAnZmxleCd9KTtcclxuICAgIH0pO1xyXG4gICAgJCh0aGlzKS5vbignbW91c2VvdXQnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAkKHRoaXMpLmZpbmQoXCIuaW5jLW1lbnVcIikuY3NzKHtkaXNwbGF5OiAnbm9uZSd9KTtcclxuICAgIH0pO1xyXG59KVxyXG5cclxuIiwibGV0IHBsYXllcjtcclxuY29uc3QgcGxheWVyQ29udGFpbmVyID0gJChcIi5wbGF5ZXJcIik7XHJcbmxldCBmPSAxO1xyXG5cclxubGV0IGV2ZW50c0luaXQgPSAoKSA9PiB7XHJcbiAgICAkKFwiLnBsYXllcl9fc3RhcnRcIikuY2xpY2soZSA9PiB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICBpZiAocGxheWVyQ29udGFpbmVyLmhhc0NsYXNzKFwicGF1c2VkXCIpKSB7XHJcbiAgICAgICAgICAgIHBsYXllci5wYXVzZVZpZGVvKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcGxheWVyLnBsYXlWaWRlbygpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgICQoXCIucGxheWVyX19wbGF5YmFja1wiKS5jbGljayhlID0+IHtcclxuICAgICAgICBjb25zdCBiYXIgPSAkKGUuY3VycmVudFRhcmdldCk7XHJcbiAgICAgICAgY29uc3QgY2xpY2tlZFBvc2l0aW9uID0gZS5vcmlnaW5hbEV2ZW50LmxheWVyWDtcclxuICAgICAgICBjb25zdCBuZXdCdXR0b25Qb3NpdGlvblBlcmNlbnQgPSAoY2xpY2tlZFBvc2l0aW9uIC8gYmFyLndpZHRoKCkpICogMTAwO1xyXG4gICAgICAgIGNvbnN0IG5ld1BsYXliYWNrUG9zaXRpb25TZWMgPVxyXG4gICAgICAgICAgICAocGxheWVyLmdldER1cmF0aW9uKCkgLyAxMDApICogbmV3QnV0dG9uUG9zaXRpb25QZXJjZW50O1xyXG5cclxuICAgICAgICAkKFwiLnBsYXllcl9fcGxheWJhY2stYnV0dG9uXCIpLmNzcyh7XHJcbiAgICAgICAgICAgIGxlZnQ6IGAke25ld0J1dHRvblBvc2l0aW9uUGVyY2VudH0lYFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBwbGF5ZXIuc2Vla1RvKG5ld1BsYXliYWNrUG9zaXRpb25TZWMpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJChcIi5wbGF5ZXJfX3NwbGFzaFwiKS5jbGljayhlID0+IHtcclxuICAgICAgICBwbGF5ZXIucGxheVZpZGVvKCk7XHJcbiAgICB9KVxyXG59O1xyXG5cclxuY29uc3QgZm9ybWF0VGltZSA9IHRpbWVTZWMgPT4ge1xyXG4gICAgY29uc3Qgcm91bmRUaW1lID0gTWF0aC5yb3VuZCh0aW1lU2VjKTtcclxuXHJcbiAgICBjb25zdCBtaW51dGVzID0gYWRkWmVybyhNYXRoLmZsb29yKHJvdW5kVGltZSAvIDYwKSk7XHJcbiAgICBjb25zdCBzZWNvbmRzID0gYWRkWmVybyhyb3VuZFRpbWUgLSBtaW51dGVzICogNjApO1xyXG5cclxuICAgIGZ1bmN0aW9uIGFkZFplcm8obnVtKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bSA8IDEwID8gYDAke251bX1gIDogbnVtO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBgJHttaW51dGVzfSA6ICR7c2Vjb25kc31gO1xyXG59O1xyXG5cclxuY29uc3Qgb25QbGF5ZXJSZWFkeSA9ICgpID0+IHtcclxuICAgIGxldCBpbnRlcnZhbDtcclxuICAgIGNvbnN0IGR1cmF0aW9uU2VjID0gcGxheWVyLmdldER1cmF0aW9uKCk7XHJcblxyXG4gICAgJChcIi5wbGF5ZXJfX2R1cmF0aW9uLWVzdGltYXRlXCIpLnRleHQoZm9ybWF0VGltZShkdXJhdGlvblNlYykpO1xyXG5cclxuICAgIGlmICh0eXBlb2YgaW50ZXJ2YWwgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsKTtcclxuICAgIH1cclxuXHJcbiAgICBpbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcclxuICAgICAgICBjb25zdCBjb21wbGV0ZWRTZWMgPSBwbGF5ZXIuZ2V0Q3VycmVudFRpbWUoKTtcclxuICAgICAgICBjb25zdCBjb21wbGV0ZWRQZXJjZW50ID0gKGNvbXBsZXRlZFNlYyAvIGR1cmF0aW9uU2VjKSAqIDEwMDtcclxuXHJcbiAgICAgICAgJChcIi5wbGF5ZXJfX3BsYXliYWNrLWJ1dHRvblwiKS5jc3Moe1xyXG4gICAgICAgICAgICBsZWZ0OiBgJHtjb21wbGV0ZWRQZXJjZW50fSVgXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICQoXCIucGxheWVyX19kdXJhdGlvbi1jb21wbGV0ZWRcIikudGV4dChmb3JtYXRUaW1lKGNvbXBsZXRlZFNlYykpO1xyXG4gICAgfSwgMTAwMCk7XHJcbn07XHJcblxyXG5jb25zdCBvblBsYXllclN0YXRlQ2hhbmdlID0gZXZlbnQgPT4ge1xyXG4gICAgLypcclxuICAgICAgLTEgKNCy0L7RgdC/0YDQvtC40LfQstC10LTQtdC90LjQtSDQstC40LTQtdC+INC90LUg0L3QsNGH0LDRgtC+KVxyXG4gICAgICAwICjQstC+0YHQv9GA0L7QuNC30LLQtdC00LXQvdC40LUg0LLQuNC00LXQviDQt9Cw0LLQtdGA0YjQtdC90L4pXHJcbiAgICAgIDEgKNCy0L7RgdC/0YDQvtC40LfQstC10LTQtdC90LjQtSlcclxuICAgICAgMiAo0L/QsNGD0LfQsClcclxuICAgICAgMyAo0LHRg9GE0LXRgNC40LfQsNGG0LjRjylcclxuICAgICAgNSAo0LLQuNC00LXQviDQv9C+0LTQsNGO0YIg0YDQtdC/0LvQuNC60LgpLlxyXG4gICAgKi9cclxuICAgIHN3aXRjaCAoZXZlbnQuZGF0YSkge1xyXG4gICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgcGxheWVyQ29udGFpbmVyLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICBwbGF5ZXJDb250YWluZXIuYWRkQ2xhc3MoXCJwYXVzZWRcIik7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgIHBsYXllckNvbnRhaW5lci5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgcGxheWVyQ29udGFpbmVyLnJlbW92ZUNsYXNzKFwicGF1c2VkXCIpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgIH1cclxufTtcclxuXHJcbmZ1bmN0aW9uIG9uWW91VHViZUlmcmFtZUFQSVJlYWR5KCkge1xyXG4gICAgcGxheWVyID0gbmV3IFlULlBsYXllcihcInl0LXBsYXllclwiLCB7XHJcbiAgICAgICAgaGVpZ2h0OiBcIjQwNVwiLFxyXG4gICAgICAgIHdpZHRoOiBcIjY2MFwiLFxyXG4gICAgICAgIHZpZGVvSWQ6IFwiTFhiM0VLV3NJblFcIixcclxuICAgICAgICBldmVudHM6IHtcclxuICAgICAgICAgICAgb25SZWFkeTogb25QbGF5ZXJSZWFkeSxcclxuICAgICAgICAgICAgb25TdGF0ZUNoYW5nZTogb25QbGF5ZXJTdGF0ZUNoYW5nZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcGxheWVyVmFyczoge1xyXG4gICAgICAgICAgICBjb250cm9sczogMCxcclxuICAgICAgICAgICAgZGlzYWJsZWtiOiAwLFxyXG4gICAgICAgICAgICBzaG93aW5mbzogMCxcclxuICAgICAgICAgICAgcmVsOiAwLFxyXG4gICAgICAgICAgICBhdXRvcGxheTogMCxcclxuICAgICAgICAgICAgbW9kZXN0YnJhbmRpbmc6IDBcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXZlbnRzSW5pdCgpO1xyXG4iLCJsZXQgbXlNYXA7XHJcbmNvbnN0IGluaXQgPSAoKSA9PiB7XHJcbiAgICBteU1hcCA9IG5ldyB5bWFwcy5NYXAoXCJtYXBcIiwge1xyXG4gICAgICAgIGNlbnRlcjogWzU5LjkzOTE2OTk4NjkyMTc0LCAzMC4zMDkwMTUwOTY3MzI2MjJdLFxyXG4gICAgICAgIHpvb206IDExLFxyXG4gICAgICAgIGNvbnRyb2xzOiBbXSxcclxuICAgIH0pO1xyXG5cclxuICAgIGxldCBjb29yZHMgPSBbXHJcbiAgICAgICAgICAgIFs1OS45NDU1NDMyNzk4OTI4NywgMzAuMzg5MzUyNjIxMTQ2NjhdLFxyXG4gICAgICAgICAgICBbNTkuOTExNDIzMjM1NjM5MDksIDMwLjUwMDI0NTg3MDY1ODQxXSxcclxuICAgICAgICAgICAgWzU5Ljg4NjkzMTYxNzg0NjA2LCAzMC4zMTk2NTgxMDIxMDM3MTNdLFxyXG4gICAgICAgICAgICBbNTkuOTcwMzM1NzQ4MjE2NzIsIDMwLjMxNTE5NDkwNjMwMjkyNF0sXHJcbiAgICAgICAgXSxcclxuICAgICAgICBteUNvbGxlY3Rpb24gPSBuZXcgeW1hcHMuR2VvT2JqZWN0Q29sbGVjdGlvbih7fSwge1xyXG4gICAgICAgICAgICBkcmFnZ2FibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBpY29uTGF5b3V0OiAnZGVmYXVsdCNpbWFnZScsXHJcbiAgICAgICAgICAgIGljb25JbWFnZUhyZWY6ICcuL2ltZy9pY29ucy9tYXJrZXIuc3ZnJyxcclxuICAgICAgICAgICAgaWNvbkltYWdlU2l6ZTogWzQ2LCA1N10sXHJcbiAgICAgICAgICAgIGljb25JbWFnZU9mZnNldDogWy0zNSwgLTUyXVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29vcmRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgbXlDb2xsZWN0aW9uLmFkZChuZXcgeW1hcHMuUGxhY2VtYXJrKGNvb3Jkc1tpXSkpO1xyXG4gICAgfVxyXG5cclxuICAgIG15TWFwLmdlb09iamVjdHMuYWRkKG15Q29sbGVjdGlvbik7XHJcblxyXG4gICAgbXlNYXAuYmVoYXZpb3JzLmRpc2FibGUoJ3Njcm9sbFpvb20nKTtcclxufTtcclxuXHJcbnltYXBzLnJlYWR5KGluaXQpO1xyXG4iLCJcclxuZnVuY3Rpb24gQWNjb3JkKHNlbGVjdG9yKSB7XHJcbiAgICBjb25zdCBhY2NvcmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcclxuICAgIGNvbnN0IGl0ZW1zID0gYWNjb3JkLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWxpc3RdJykuY2hpbGRyZW47XHJcbiAgICBjb25zdCBjbG9zZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hY2NvcmRfX2Nsb3NlLWJ0bicpO1xyXG5cclxuICAgIGFjY29yZC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0ICgpO1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0LmNsb3Nlc3QoJ1tkYXRhXScpO1xyXG5cclxuICAgICAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdhY2NvcmRfX2Nsb3NlLWJ0bicpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZS50YXJnZXQucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnaXRlbS1hY3RpdmUnKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYoIXRhcmdldCkgcmV0dXJuO1xyXG5cclxuICAgICAgICBjb25zdCBpdGVtID0gdGFyZ2V0LnBhcmVudE5vZGU7XHJcblxyXG4gICAgICAgIGlmIChpdGVtLmNsYXNzTGlzdC5jb250YWlucygnaXRlbS1hY3RpdmUnKSkge1xyXG4gICAgICAgICAgICBpdGVtLmNsYXNzTGlzdC5yZW1vdmUoJ2l0ZW0tYWN0aXZlJyk7XHJcbiAgICAgICAgfWVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVtc1tpXS5jbGFzc0xpc3QucmVtb3ZlKCdpdGVtLWFjdGl2ZScpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpdGVtLmNsYXNzTGlzdC5hZGQoJ2l0ZW0tYWN0aXZlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG59XHJcblxyXG5BY2NvcmQgKCcjYWNjb3JkLW1lbnUnKVxyXG4iLCJjb25zdCBzZWN0aW9ucyA9ICQoXCJzZWN0aW9uXCIpO1xyXG5jb25zdCBkaXNwbGF5ID0gJChcIi5tYWluY29udGVudFwiKTtcclxuY29uc3Qgc2lkZU1lbnUgPSAkKFwiLmZpeGVkLW1lbnVcIik7XHJcbmNvbnN0IG1lbnVJdGVtcyA9IHNpZGVNZW51LmZpbmQoXCIuZml4ZWQtbWVudV9faXRlbVwiKTtcclxuXHJcbmNvbnN0IG1vYmlsZWQgPSBuZXcgTW9iaWxlRGV0ZWN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTtcclxuY29uc3QgaXNNb2JpbGUgPSBtb2JpbGVkLm1vYmlsZSgpO1xyXG5cclxubGV0IGluU2Nyb2xsID0gZmFsc2U7XHJcblxyXG5zZWN0aW9ucy5maXJzdCgpLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xyXG5cclxuY29uc3QgY291bnRTZWN0aW9uUG9zaXRpb24gPSBzZWN0aW9uRXEgPT4ge1xyXG4gICAgcmV0dXJuIHNlY3Rpb25FcSAqIC0xMDMuNTtcclxufTtcclxuXHJcbmNvbnN0IGNoYW5nZU1lbnVUaGVtZUZvclNlY3Rpb24gPSAoc2VjdGlvbkVxKSA9PiB7XHJcbiAgICBjb25zdCBjdXJyZW50U2VjdGlvbiA9IHNlY3Rpb25zLmVxKHNlY3Rpb25FcSk7XHJcbiAgICBjb25zdCBtZW51VGhlbWUgPSBjdXJyZW50U2VjdGlvbi5hdHRyKFwiZGF0YS1zaWRlbWVudS10aGVtZVwiKTtcclxuICAgIGNvbnN0IGFjdGl2ZUNsYXNzID0gXCJmaXhlZC1tZW51LS1zaGFkb3dlZFwiO1xyXG5cclxuICAgIGlmIChtZW51VGhlbWUgPT09IFwiYmxhY2tcIikge1xyXG4gICAgICAgIHNpZGVNZW51LmFkZENsYXNzKGFjdGl2ZUNsYXNzKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2lkZU1lbnUucmVtb3ZlQ2xhc3MoYWN0aXZlQ2xhc3MpO1xyXG4gICAgfVxyXG59O1xyXG5cclxuY29uc3QgcmVzZXRBY3RpdmVDbGFzc0Zvckl0ZW0gPSAoaXRlbXMsIGl0ZW1FcSwgYWN0aXZlQ2xhc3MpID0+IHtcclxuICAgIGl0ZW1zLmVxKGl0ZW1FcSkuYWRkQ2xhc3MoYWN0aXZlQ2xhc3MpLnNpYmxpbmdzKCkucmVtb3ZlQ2xhc3MoYWN0aXZlQ2xhc3MpO1xyXG59XHJcblxyXG5jb25zdCBwZXJmb3JtVHJhbnNpdGlvbiA9IHNlY3Rpb25FcSA9PiB7XHJcblxyXG4gICAgaWYgKGluU2Nyb2xsKSByZXR1cm47XHJcblxyXG4gICAgY29uc3QgdHJhbnNpdGlvbk92ZXIgPSAxMDAwO1xyXG4gICAgY29uc3QgbW91c2VJbmVydGlhT3ZlciA9IDMwMDtcclxuXHJcbiAgICBpblNjcm9sbCA9IHRydWU7XHJcblxyXG4gICAgY29uc3QgcG9zaXRpb24gPSBjb3VudFNlY3Rpb25Qb3NpdGlvbihzZWN0aW9uRXEpO1xyXG5cclxuICAgIGNoYW5nZU1lbnVUaGVtZUZvclNlY3Rpb24oc2VjdGlvbkVxKTtcclxuXHJcbiAgICBkaXNwbGF5LmNzcyh7XHJcbiAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlWSgke3Bvc2l0aW9ufSUpYFxyXG4gICAgfSk7XHJcblxyXG4gICAgcmVzZXRBY3RpdmVDbGFzc0Zvckl0ZW0oc2VjdGlvbnMsIHNlY3Rpb25FcSwgXCJhY3RpdmVcIik7XHJcbiAgICBzZWN0aW9ucy5lcShzZWN0aW9uRXEpLmFkZENsYXNzKFwiYWN0aXZlXCIpLnNpYmxpbmdzKCkucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XHJcblxyXG5cclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIGluU2Nyb2xsID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHJlc2V0QWN0aXZlQ2xhc3NGb3JJdGVtKG1lbnVJdGVtcywgc2VjdGlvbkVxLCBcImZpeGVkLW1lbnVfX2l0ZW0tLWFjdGl2ZVwiKTtcclxuXHJcbiAgICB9LCB0cmFuc2l0aW9uT3ZlciArIG1vdXNlSW5lcnRpYU92ZXIpXHJcbn07XHJcblxyXG5jb25zdCBzY3JvbGxWaWV3cG9ydCA9IGRpcmVjdGlvbiA9PiB7XHJcbiAgICBjb25zdCBhY3RpdmVTZWN0aW9uID0gc2VjdGlvbnMuZmlsdGVyKFwiLmFjdGl2ZVwiKTtcclxuICAgIGNvbnN0IG5leHRTZWN0aW9uID0gYWN0aXZlU2VjdGlvbi5uZXh0KCk7XHJcbiAgICBjb25zdCBwcmV2U2VjdGlvbiA9IGFjdGl2ZVNlY3Rpb24ucHJldigpO1xyXG5cclxuICAgIGlmIChkaXJlY3Rpb24gPT09IFwibmV4dFwiICYmIG5leHRTZWN0aW9uLmxlbmd0aCkge1xyXG4gICAgICAgIHBlcmZvcm1UcmFuc2l0aW9uKG5leHRTZWN0aW9uLmluZGV4KCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChkaXJlY3Rpb24gPT09IFwicHJldlwiICYmIHByZXZTZWN0aW9uLmxlbmd0aCkge1xyXG4gICAgICAgIHBlcmZvcm1UcmFuc2l0aW9uKHByZXZTZWN0aW9uLmluZGV4KCkpO1xyXG4gICAgfVxyXG59O1xyXG5cclxuJCh3aW5kb3cpLm9uKFwid2hlZWxcIiwgZSA9PiB7XHJcbiAgICBjb25zdCBkZWx0YVkgPSBlLm9yaWdpbmFsRXZlbnQuZGVsdGFZO1xyXG5cclxuICAgIGlmIChkZWx0YVkgPiAwKSB7XHJcbiAgICAgICAgc2Nyb2xsVmlld3BvcnQoXCJuZXh0XCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChkZWx0YVkgPCAwKSB7XHJcbiAgICAgICAgc2Nyb2xsVmlld3BvcnQoXCJwcmV2XCIpO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbiQod2luZG93KS5vbihcImtleWRvd25cIiwgZSA9PiB7XHJcblxyXG4gICAgY29uc3QgdGFnbmFtZSA9IGUudGFyZ2V0LnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcclxuICAgIGNvbnN0IHVzZXJUeXBpbmdJbklucHV0cyA9IHRhZ25hbWUgPT09IFwiaW5wdXRcIiB8fCB0YWduYW1lID09PSBcInRleHRhcmVhXCI7XHJcbiAgICBpZiAodXNlclR5cGluZ0luSW5wdXRzKSByZXR1cm47XHJcblxyXG4gICAgc3dpdGNoIChlLmtleUNvZGUpIHtcclxuICAgICAgICBjYXNlIDM4OlxyXG4gICAgICAgICAgICBzY3JvbGxWaWV3cG9ydChcInByZXZcIik7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgNDA6XHJcbiAgICAgICAgICAgIHNjcm9sbFZpZXdwb3J0KFwibmV4dFwiKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuJChcIi53cmFwcGVyXCIpLm9uKFwidG91Y2htb3ZlXCIsIGUgPT4gZS5wcmV2ZW50RGVmYXVsdCgpKTtcclxuXHJcbiQoXCJbZGF0YS1zY3JvbGwtdG9dXCIpLmNsaWNrKGUgPT4ge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgIGNvbnN0ICR0aGlzID0gJChlLmN1cnJlbnRUYXJnZXQpO1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gJHRoaXMuYXR0cihcImRhdGEtc2Nyb2xsLXRvXCIpO1xyXG4gICAgY29uc3QgcmVxU2VjdGlvbiA9ICQoYFtkYXRhLXNlY3Rpb24taWQ9JHt0YXJnZXR9XWApO1xyXG5cclxuICAgIHBlcmZvcm1UcmFuc2l0aW9uKHJlcVNlY3Rpb24uaW5kZXgoKSk7XHJcblxyXG59KTtcclxuXHJcbmlmIChpc01vYmlsZSlcclxue1xyXG4gICAgJChcImJvZHlcIikuc3dpcGUoe1xyXG4gICAgICAgIHN3aXBlOiBmdW5jdGlvbiAoZXZlbnQsIGRpcmVjdGlvbikge1xyXG4gICAgICAgICAgICBpZiAoZGlyZWN0aW9uID09PSBcInVwXCIpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNjcm9sbFZpZXdwb3J0KFwibmV4dFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZGlyZWN0aW9uID09PSBcImRvd25cIilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2Nyb2xsVmlld3BvcnQoXCJwcmV2XCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuXHJcblxyXG4iXX0=
